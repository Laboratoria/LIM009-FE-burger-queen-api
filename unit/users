const mockingoose = require('mockingoose').default;
const User = require('../models/modelUsers');
const { getUsers, getUserUid, postUser, putUser, deleteUser } = require('../controllers/users');


describe('test mongoose User model', () => {
    /*     it('should return the doc with findById', () => {
            const _doc = {
                _id: '507f191e810c19729de860ea',
                name: 'name',
                email: 'name@email.com',
            };

            mockingoose(Users).toReturn(_doc, 'findOne');

            return Users.findById({ _id: '507f191e810c19729de860ea' }).then(doc => {
                expect(JSON.parse(JSON.stringify(doc))).toMatchObject(_doc);
            });
        }); */

    it('should return the doc with update', () => {
        const _doc = {
            _id: '507f191e810c19729de860ea',
            name: 'name',
            email: 'name@email.com',
        };
        postUser(_doc).then((userStored)=>{
            expect(JSON.parse(JSON.stringify(doc))).toMatchObject(_doc);
        })
/*         mockingoose(User).toReturn(_doc, 'save');
        console.log(User)
        return User.then(doc => {
            expect(JSON.parse(JSON.stringify(doc))).toMatchObject(_doc);
        }); */
    });

    /*     it('should return the doc with update', () => {
        const _doc = {
            _id: '507f191e810c19729de860ea',
            name: 'name',
            email: 'name@email.com',
        };

        mockingoose(model).toReturn(doc, 'update');

        return model
            .update({ name: 'changed' }) // this won't really change anything
            .where({ _id: '507f191e810c19729de860ea' })
            .then(doc => {
                expect(JSON.parse(JSON.stringify(doc))).toMatchObject(_doc);
            });
    }); */
});




















/* const { gettingToken } = require('../utils/test/superTest')

describe('POST /auth', () => {
    it('debería retornar un token para el administrador', () => (
        gettingToken('admin@localhost', 'changeme').then(resp => {
            // console.log(resp)
            expect(resp.status).toBe(200);
            expect(resp.body).toHaveProperty('token');
            
        })
    ));

    it('debería retornar un token para un usuario  ', () => (
        gettingToken('labo@labo.la', 'laboratori').then((result) => {
            console.log(result)
            expect(result.status).toBe(200);
            expect(result.body).toHaveProperty('token');
        })
    ));

    it('debería retornar un error 400 cuando no se provee email o password', () => (
        gettingToken('admin@localhost', '').then(resp => {
            expect(resp.status).toBe(400);
        })
    ));

    it('debería retornar un error 401 con un email', () => (
        gettingToken('abc@abc', '123456').then(resp => {
            expect(resp.status).toBe(401);
        })
    ));
    it('debería retornar un error 401 con password invàlido', () => (
        gettingToken('test@test.test', 'changeme').then(resp => {
            expect(resp.status).toBe(401);
        })
    ));
});
 */



/* const { Express } = require('jest-express/lib/express');
const { server } = require('./e2e/globalSetup.js');

let app;

describe('Server', () => {
    beforeEach(() => {
        app = new Express();
    });

    afterEach(() => {
        app.resetMocked();
    });

    test('should setup server', () => {
        const options = {
            port: 3000,
        };
        server(app, options);
        expect(app.set).toBeCalledWith('port', options.port);
    });
}); */

/*     it('should respond with 400 when email is missing', () => (
        fetch('/auth', {
            method: 'POST',
            body: { email: '', password: 'xxxx' },
        })
        .then(resp => expect(resp.status).toBe(400))
    ));

    it('should respond with 400 when password is missing', () => (
        fetch('/auth', {
            method: 'POST',
            body: { email: 'foo@bar.baz' },
        })
        .then(resp => expect(resp.status).toBe(400))
    ));

    it('fail with 404 credentials dont match', () => (
        fetch('/auth', {
            method: 'POST',
            body: { email: `foo-${Date.now()}@bar.baz`, password: 'xxxx' },
        })
        .then(resp => expect(resp.status).toBe(404))
    ));

    it('should create new auth token and allow access using it', () => (
        fetch('/auth', {
            method: 'POST',
            body: { email: config.adminEmail, password: config.adminPassword },
        })
        .then((resp) => {
            expect(resp.status).toBe(200);
            return resp.json();
        })
        .then(({ token }) => fetchWithAuth(token)(`/users/${config.adminEmail}`))
        .then((resp) => {
            expect(resp.status).toBe(200);
            return resp.json();
        })
        .t
        he
        n(json => expect(json.email).toBe(config.adminEmail))
    )); */